% This script will generate two files 'dataset2.mat' and 'testdata1.mat'
% If changes to dataset or test set are required, enter them here and then
% copy the two files generated by this script to the 'core' folder and 
% replace the two files of the same name that already exist there.


% Our neural network classifier predicts a particular class (1, 2, etc..) for a given word
% The particular class corosponds to a particular index of z.
% eg1: Predicted class = 1 ... output = "x2mdate"
% eg2: Predicted class = 3 ... output = "xcorr2"

z = ["x2mdate"; "xcorr"; "xcorr2"; "xcov"; "xcovf"; "xie_beni_index"; "xlabel"; "xlim"; "xls2oct"; "xlsclose"; "xlsfinfo"; ...
"xlsopen"; "xlsread"; "xlswrite"; "xmlread"; "xmlwrite"; "xor"; "+xptopen"; "xval"; "xyz2lab"; "xyz2rgb"; "xzero"];

% When all the strings will be stored the same matrix, automatic padding will occour which will make all the
% strings of the same length. This is actually useful since this is exactly what is required by a neural network.

% with this statement, we choose to pad with the null character '\0'
string_fill_char('');

% X contains our training data. Which are basically the words whose correct spellings will be 'learned' by the neural network
% X contains a word (eg: x2mdate) and then the same word shifted right by one unit with a null character (eg: \0x2mdate)
% This has been done, only to improve the accuracy of the neural network.

% These may not look like common words of the English Language. Actually these are some of the functions of the GNU Octave 
% programming language. Visit: https://www.gnu.org/software/octave/ for details.

X = ["x2mdate"; "\0x2mdate"; "xcorr"; "\0xcorr"; "xcorr2"; "\0xcorr2"; "xcov"; "\0xcov"; "xcovf"; "\0xcovf"; "xie_beni_index"; "\0xie_beni_index"; ...
     "xlabel"; "\0xlabel"; "xlim"; "\0xlim"; "xls2oct"; "\0xls2oct"; "xlsclose"; "\0xlsclose"; "xlsfinfo"; "\0xlsfinfo"; "xlsopen"; "\0xlsopen"; ...
     "xlsread"; "\0xlsread"; "xlswrite"; "\0xlswrite"; "xmlread"; "\0xmlread"; "xmlwrite"; "\0xmlwrite"; "xor"; "\0xor"; "+xptopen"; "\0+xptopen"; ...
     "xval"; "\0xval"; "xyz2lab"; "\0xyz2lab"; "xyz2rgb"; "\0xyz2rgb"; "xzero"; "\0xzero"];

% We will be using the ASCII of the words as the input features since ASCII combination 'completely defines' a word.
% i.e. if you know the ASCII, you know the word.

% This line converts the characters to their ASCII codes and stores it in X. Now X is our complete design matrix.
X = X+0;

% y contains the different classes through which various words of X will be identified. (eg: x2mdate belongs to class 1)
y = [1; 1; 2; 2; 3; 3; 4; 4; 5; 5; 6; 6; 7; 7; 8; 8; 9; 9; 10 ;10; 11; 11; 12; 12; 13; 13; 14; 14; 15; 15; 16; 16; 17; 17; 18; 18; 19; 19; 20; 20; 21; 21; 22; 22];

% td is the test data which will be used to measure the accuracy of the Neural Network.
td = ["x2msate"; "xxorr"; "xvorr2"; "xcpv"; "xcobf"; "xue_beni_index"; "xlabel"; "xkim"; "xsl2oct"; "xlaclose"; "xlsfimfo"; ...
      "xlsooen"; "lxsread"; "xlsrwite"; "xmltead"; "zmlwrite"; "xor"; "+xpropen"; "xavl"; "xyzl7ab"; "xtz2rgb"; "xzwro"];
td = td+0;

% finally we save the data created in .mat format
save dataset2.mat X y z
save testdata1.mat td
